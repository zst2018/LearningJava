/*
 位运算
 &  |   ^   ~
 << (左移)     >>（右移）  >>>（无符号移位）
注意：要做位运算，首先要先把数据转换为二进制数‘
而且参与运算的是数据的补码

*/
class OperatorDemo5{
	public static void main(String[] args){
		int x=5;
		int y=-3;
		System.out.println(x & y);
		System.out.println(x | y);
		System.out.println(x ^ y);
		System.out.println(~x);
		System.out.println(~y);
/*
分析：

5 的二进制：00000000 00000000 00000000 00000101（原码  反码 补码 相同）
-3 的二进制：10000000 00000000 00000000 00000011（原码）
			 11111111 11111111 11111111 11111100 （反码）
			 11111111 11111111 11111111 11111101 （补码）
& 位与运算（有0 则0）
		00000000 00000000 00000000 00000101
	&   11111111 11111111 11111111 11111101 
	————————————————————————————————————————————
		00000000 00000000 00000000 00000101
结果为：5
|  位或运算（有1 则1）
		00000000 00000000 00000000 00000101
	|   11111111 11111111 11111111 11111101 
	————————————————————————————————————————————	
		11111111 11111111 11111111 11111101（补码）
补码：11111111 11111111 11111111 11111101
反码：11111111 11111111 11111111 11111100
原码：10000000 00000000 00000000 00000011
结果：-3
^  位异或运算（相同为0.不同为1）
        00000000 00000000 00000000 00000101
	^   11111111 11111111 11111111 11111101 
	————————————————————————————————————————————	
		11111111 11111111 11111111 11111000(补码)
补码：  11111111 11111111 11111111 11111000
反码：  11111111 11111111 11111111 11110111
原码：  10000000 00000000 00000000 00001000
结果是：-8
~ 运算  00000000 00000000 00000000 00000101
        11111111 11111111 11111111 11111010（补码）
补码：  11111111 11111111 11111111 11111010
反码：  11111111 11111111 11111111 11111001
原码：  10000000 00000000 00000000 00000110
结果是：-6

*/
/*
^  位异或的特点：一个数据对另一个数据异或两次。该数本身不变
*/
			int a=45;
			int b=79;
			System.out.println(a^b^b);
			System.out.println(a^b^a); 
/*
面试题：实现两个整数变量的交换
*/
		int c=56;
		int d=39;
		System.out.println("c:"+c+",d:"+d);
		//方式1：使用第三方变量（开发中常用方式）
		/*int e;
		e=c;
		c=d;
		d=e;
		System.out.println("c:"+c+",d:"+d+",e:"+e);
		System.out.println("**********************")
		*/
		//方式2：用位异或方式实现（面试用）
		/*c=c^d;
		d=c^d;
		c=c^d;

		System.out.println("c:"+c+",d:"+d);
		*/
		/*//方式3：用变量相加的方式
		
		c=c+d;
		d=c-d;
		c=c-d;
		System.out.println("c:"+c+",d:"+d);
		*/
		//方式4
		d=(c+d)-(c=d);
		System.out.println("c:"+c+",d:"+d);




	}
}